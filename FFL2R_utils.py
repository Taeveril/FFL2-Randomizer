import mmap
import FFL2R_data

MAXINT = 255

class Utility:

    def infoPatchList(VERSION:float, seed:int) -> list:
        def hexList(info:str, maxLength:int)-> list:
            hexes = []
            for digit in info:
                if digit.isdigit():
                    hexes.append(int(digit) + 0xB0)
                else: #float w/ dot
                    hexes.append(0xF0)
            while len(hexes) < maxLength:
                hexes.insert(0, 0xFF)
            return hexes

        finalList = [0x36, 0x03, 0xCB, 0x59, 0xD7, 0x81, 0xDC, 0xED, 0x53, 0xFF] #"Randomizer "
        finalList.extend(hexList(str(VERSION), 4))
        finalList.extend([0x05, 0x36, 0x03, 0xCC, 0xD8, 0x8F, 0xFF]) #"Seed "
        finalList.extend(hexList(str(seed), 10))
        finalList.extend([0x06, 0xFF, 0xFF, 0x2E, 0xFF, 0xCC, 0xE7, 0x6E, 0x54]) #truncate start/continue
        return finalList

    def bugFixQOL(rom:mmap)->mmap:
        #fix map with extra Trigger to properly process all map headers
        rom[0x1e292] = 0x09
        
        #There is a specific player movement speed variable. This sets it to 0x02 rather than 0x01, which is basically double speed.
        #increasing it higher than that starts messing up the loaded graphics. So without an overhaul, this will have to do for the
        #time being.
        moveHax = (
            #movement
            0x01e43,
            0x01e54
           )
            
        for address in moveHax:
            rom[address] = 0x02

        #this will speed text up without the a button as a default.
        #0x06 is default speed, 0x00 is fastest (as if a were pressed). Increasing value slows text down.
        textHax = (
             0x01470,
             0x067a0
             )

        for address in textHax:
             rom[address] = 0x00
        
        #elemental magi fix, mana magi affinity enable
        magifix = {
            0x32e29 : 0x0C, #elemental magi fix
            0x337ac : 0x40,
            0x337ad : 0x40,
            0x337b4 : 0x20,
            0x337b5 : 0x20,
            0x33c42 : 0x2A
            }

        for k,v in magifix.items():
            rom[k] = v

        #str stat growth for mutants corrected
        rom[0x3119c] = 0x08

        #better stat growth, written by tehtmi 
        betterGrowth = {
            0x30ffa : [0x05],
            0x31020 : [0x05],
            0x31001 : [0xE3, 0x4D, 0xD8, 0x1F, 0x00, 0x38, 0x6C, 0x36, 0x1F, 0x02, 0x14, 0x50, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06],
            0x31160 : [0x06, 0x27, 0x0E],
            0x31194 : [0x06, 0x06, 0x06],
            0x311c0 : [0x06, 0x07, 0xB3],
            0x311e8 : [0x06, 0x06, 0x06],
            0x31215 : [0x06, 0x06, 0x06],
            0x340ca : [0x00, 0x00, 0x00],
            0x34196 : [0x21, 0x4D, 0xD8, 0xC7, 0x00, 0x00],
            0x341c0 : [0xCD, 0xB5, 0x45, 0x00, 0x00, 0x00],
            0x345b5 : [0xE5, 0x21, 0x40, 0x7B, 0x1A, 0x4F, 0x1C, 0x1A, 0x47, 0x09, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 0xE6, 0xF0, 0xE1, 0xB6, 0x77, 0x78, 0xC9]
                }

        for k,v in betterGrowth.items():
            for i in range(len(v)):
                rom[k+i] = v[i]

        for i in range(0,32):
            if i == 16 or i == 17:
                rom[0x33f90+i]*=2
            else:
                rom[0x33f90+i]*=3

        #gold/meat/drop fix, written by tehtmi
            goldDropFix = {
                0x30d0d: [0x02, 0x12, 0x4D, 0x06, 0x06],
                0x30d30: [0x02, 0x53, 0x4D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
                          0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06],
                0x34292: [0xCD, 0xCC, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00],
                0x345cc: [0x21, 0x77, 0xCF, 0xAF, 0x22, 0x22, 0x77, 0x06, 0x05, 0x3E, 0xD0, 0x80, 0x67, 0x2E, 0x00, 0x7E, 0xB7, 0x28, 0x50, 0x4F, 0x2E, 0x0A, 
                          0x7E, 0x21, 0x50, 0x7C, 0xC7, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 0xE6, 0x1F, 0x07, 0x21, 0x50, 0x7E, 0xC7, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 
                          0x23, 0x5F, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 0x6B, 0x67, 0xAF, 0x57, 0x5F, 0xD5, 0xE5, 0x57, 0x1E, 0x0A, 0xCD, 0x5F, 0x01, 0x57, 0x59, 
                          0xCD, 0x5C, 0x01, 0xE5, 0xD5, 0xF8, 0x04, 0x54, 0x5D, 0xF8, 0x00, 0xCD, 0x62, 0x01, 0xE8, 0x04, 0xE1, 0x57, 0x59, 0xCD, 0x5C, 0x01, 
                          0xD5, 0x11, 0x77, 0xCF, 0xF8, 0x00, 0xCD, 0x62, 0x01, 0xE8, 0x04, 0x04, 0x78, 0xFE, 0x08, 0x38, 0xA0, 0x3E, 0x08, 0xCD, 0x7D, 0x01, 
                          0x61, 0x43, 0x0D, 0xFA, 0x45, 0xD8, 0xC9]
                }

        for k,v in goldDropFix.items():
            for i in range(len(v)):
                rom[k+i] = v[i]

        return rom

    def leonsText(magi:int) -> list:
        match magi:
            case 0x00:
                magiString=[0xC9, 0x84, 0x53] #power
            case 0x01:
                magiString=[0xCC, 0xE3, 0xD8, 0x8F] #speed
            case 0x02:
                magiString=[0xC6, 0x59, 0xD4] #mana
            case 0x03:
                magiString=[0xBD, 0xD8, 0xD9, 0x8B, 0x80] #defense
            case 0x04:
                magiString=[0xBF, 0xDC, 0x5A] #fire
            case 0x05:
                magiString=[0xC2, 0xD6, 0xD8] #ice
            case 0x06:
                magiString=[0xCD, 0xDB, 0xE8, 0x7C, 0x53] #thunder
            case 0x07:
                magiString=[0xC9, 0xE2, 0x5F, 0x65] #poison
            case 0x08:
                magiString=[0xC6, 0x89, 0xE0, 0xE8, 0x92] #masmune
            case 0x09:
                magiString=[0xBA, 0xD8, 0xDA, 0x5F] #aegis
            case 0x0B:
                magiString=[0xC1, 0x75, 0xE5, 0xE7] #heart
            case 0x0C:
                magiString=[0xC9, 0xD8, 0xDA, 0x89, 0x8E] #pegasus
            case 0x0D:
                magiString=[0xC9, 0xE5, 0x5F, 0xE0] #prism
        magiString.append(0xF3)
        while len(magiString) < 6:
            magiString.append(0xFF)
        newScriptText = [0x06, 0xCB, 0xD8, 0xD6, 0xD8, 0xDC, 0x76, 0x57, 0x9E] + magiString +   [0x0B, 0x0D, 0x12, 0x11, 
                         0x10, 0x19, 0xF6, 0x33, 0x00, 0xFF, 0x19, 0xF6, 0x11, 0x00, 0xF1, 0x02, 0xFF, 0x19, 0xF6, 0x03, 
                         0x00, 0xFF, 0xC5, 0xD8, 0x65, 0xF5, 0xC9, 0x98, 0x89, 0xD8, 0xF1, 0xF1, 0x06, 0xFF, 0xBF, 0x66, 
                         0xDA, 0xDC, 0x76, 0x64, 0x4E, 0xF1, 0xF3, 0xF3, 0x11, 0x04, 0x0D, 0x19, 0xF0, 0x12, 0x19, 0xF6, 
                         0x13, 0x00, 0xF2, 0x13, 0xFF, 0x19, 0xF6, 0x21, 0x00, 0xFF, 0x13, 0x11, 0x14, 0x08, 0x06, 0x10, 
                         0x20, 0x1F, 0x00, 0xF5, 0xC5, 0xD8, 0x65, 0x63, 0x5D, 0x98, 0x58, 0xFF, 0x06, 0x9E] + magiString + [0x18, 0x68, 0x00]

        return newScriptText

        # old memo-entry writing code
        # while j <= 5:
        #     if magiString[j] == 0xF3:
        #         magiString[j] = 0xF0
        #     j+=1
        # newMemoText = [0x63, 0x5D, 0x98, 0x58, 0xFF, 0xFF, 0x06, 0x9E] + magiString + [0xFF, 0xFF]
        # k=0x3ca6b
        # while k <= 0x3ca7a:
        #     rom[k] = newMemoText[0]
        #     newMemoText.pop(0)
        #     k+=1
        # return rom

    def dteTranslate(strList:list)->str:
        result = ""
        for char in strList:
            try:
                result = result + (FFL2R_data.GameData.dteLookup[char])
            except:
                result = result + " " + (str(char))
        return result

    def listToHex(intList:list)->list:
        return [hex(x) for x in intList]

    def setBoundaries(num:int, floor:int, ceiling:int) -> int:
        if num < floor:
            num = floor
        elif num > ceiling:
           num = ceiling
        return num


    # def lockInfo(MAXINT:int, rom:mmap) -> mmap:
    #     i=0x2c032
    #     while i <= 0x2c183:
    #         if (rom[i] + 11) > MAXINT:
    #             carryOver = rom[i]
    #             carryOver +=11
    #             carryOver -=256
    #             rom[i] = carryOver
    #             i+=1
    #             rom[i]+=1
    #         else:
    #             rom[i]+=11
    #         i+=1

    #     lock0 = [0xBE, 0xEB, 0x87, 0xF5, 0x06, 0x9E, 0xFF, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x03, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Exit, but lets repurpose this for Ashura
    #     lock1 = [0xC4, 0xDC, 0x77, 0xFF, 0xC1, 0x75, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x17, 0x19, 0x01, 0x10, 0x00, 0x19, 0x00, 0x2F, 0x00] #Ki's Head
    #     lock2 = [0xCF, 0xD4, 0xDF, 0x6A, 0x67, 0xD4, 0xF5, 0x06, 0x9E, 0xB6, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x43, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Valhalla
    #     lock3 = [0xC1, 0x55, 0x80, 0xF5, 0x06, 0x9E, 0xB1, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x11, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #House
    #     lock4 = [0xC0, 0xDC, 0x59, 0xE7, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB1, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x0E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Giant's World
    #     lock5 = [0xBA, 0xE3, 0xE2, 0x67, 0xE2, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x18, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Apollo's World
    #     lock6 = [0xC0, 0xE8, 0x6E, 0xD7, 0xDC, 0x59, 0x77, 0xFF, 0xBB, 0x89, 0xD8, 0xF5, 0x06, 0x9E, 0xB3, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x22, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Guardian's Base
    #     lock7 = [0xC7, 0x56, 0xDD, 0xD4, 0xF5, 0x06, 0x9E, 0xB3, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x26, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #ninja
    #     lock8 = [0xCF, 0x8B, 0x8E, 0xEE, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB4, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x29, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Venus' World
    #     lock9 = [0xCB, 0xD4, 0xD6, 0x4E, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB5, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x3A, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Race World
    #     locka = [0xBE, 0xD7, 0xE2, 0xF5, 0x06, 0x9E, 0xB6, 0xB3, 0xF5, 0x2C, 0x06, 0x1A, 0x3E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #edo
    #     lockb = [0xC7, 0x89, 0xE7, 0x72, 0xBD, 0xE8, 0x6B, 0xD8, 0x65, 0xF5, 0x06, 0x9E, 0xB6, 0xB7, 0xF5, 0x2C, 0x06, 0x1A, 0x42, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #nasty dungeon
    #     lockc = [0xBC, 0x8B, 0xE7, 0x82, 0x96, 0xC9, 0xDC, 0x67, 0x6E, 0xF5, 0x06, 0x9E, 0xFF, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x00, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #central pillar

    # print(FFL2R_utils.Utility.dteTranslate([0xBE, 0xEB, 0x87, 0xF5, 0x06, 0x9E, 0xFF, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x03, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Exit, but lets repurpose this for Ashura
    # print(FFL2R_utils.Utility.dteTranslate([0xC4, 0xDC, 0x77, 0xFF, 0xC1, 0x75, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x17, 0x19, 0x01, 0x10, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Ki's Head
    # print(FFL2R_utils.Utility.dteTranslate([0xCF, 0xD4, 0xDF, 0x6A, 0x67, 0xD4, 0xF5, 0x06, 0x9E, 0xB6, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x43, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Valhalla
    # print(FFL2R_utils.Utility.dteTranslate([0xC1, 0x55, 0x80, 0xF5, 0x06, 0x9E, 0xB1, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x11, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #House
    # print(FFL2R_utils.Utility.dteTranslate([0xC0, 0xDC, 0x59, 0xE7, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB1, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x0E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Giant's World
    # print(FFL2R_utils.Utility.dteTranslate([0xBA, 0xE3, 0xE2, 0x67, 0xE2, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x18, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Apollo's World
    # print(FFL2R_utils.Utility.dteTranslate([0xC0, 0xE8, 0x6E, 0xD7, 0xDC, 0x59, 0x77, 0xFF, 0xBB, 0x89, 0xD8, 0xF5, 0x06, 0x9E, 0xB3, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x22, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Guardian's Base
    # print(FFL2R_utils.Utility.dteTranslate([0xC7, 0x56, 0xDD, 0xD4, 0xF5, 0x06, 0x9E, 0xB3, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x26, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #ninja
    # print(FFL2R_utils.Utility.dteTranslate([0xCF, 0x8B, 0x8E, 0xEE, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB4, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x29, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Venus' World
    # print(FFL2R_utils.Utility.dteTranslate([0xCB, 0xD4, 0xD6, 0x4E, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB5, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x3A, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Race World
    # print(FFL2R_utils.Utility.dteTranslate([0xBE, 0xD7, 0xE2, 0xF5, 0x06, 0x9E, 0xB6, 0xB3, 0xF5, 0x2C, 0x06, 0x1A, 0x3E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #edo
    # print(FFL2R_utils.Utility.dteTranslate([0xC7, 0x89, 0xE7, 0x72, 0xBD, 0xE8, 0x6B, 0xD8, 0x65, 0xF5, 0x06, 0x9E, 0xB6, 0xB7, 0xF5, 0x2C, 0x06, 0x1A, 0x42, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #nasty dungeon
    # print(FFL2R_utils.Utility.dteTranslate([0xBC, 0x8B, 0xE7, 0x82, 0x96, 0xC9, 0xDC, 0x67, 0x6E, 0xF5, 0x06, 0x9E, 0xFF, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x00, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #central pillar

        #j=0x2ca18
        #while j <= 0x2eae0:

    # memoset = scriptingBlock2.findScriptsByBytes([0x18])
    # memoset.reverse()
    # for cmd in memoset:
    #     if cmd[0] not in (17, 236, 248, 74, 83):
    #         del scriptingBlock2.script[cmd[0]].scriptData[cmd[1]:cmd[1]+2]
    #         scriptingBlock2.addBytes(cmd[0], -2)


    # print(f"""
    # var-inc 1:{scriptingBlock1.findScriptsByBytes([0x12, 0x1f, 0x1])}
    # var-inc 2:{scriptingBlock2.findScriptsByBytes([0x12, 0x1f, 0x1])}
    # var-dec 1:{scriptingBlock1.findScriptsByBytes([0x13, 0x1f, 0x1])}
    # var-dec 2:{scriptingBlock2.findScriptsByBytes([0x13, 0x1f, 0x1])}
    # var-set 1:{scriptingBlock1.findScriptsByBytes([0x14, 0x1f, 0x1])}
    # var-set 2:{scriptingBlock2.findScriptsByBytes([0x14, 0x1f, 0x1])}
    # var-test 1:{scriptingBlock1.findScriptsByBytes([0x15, 0x1f, 0x1])}
    # var-test 2:{scriptingBlock2.findScriptsByBytes([0x15, 0x1f, 0x1])}
    # NPCs: {mapHeaders.findNPCs(0,31)}""")
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[55].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[56].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[57].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[58].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[59].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[78].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[80].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[95].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[193].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[201].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[202].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[203].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[204].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[205].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[206].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[207].scriptData))
    #mapHeaders.findNPCs(3, 129)
    #mapHeaders.findNPCs(3, 130)
    #mapHeaders.findNPCs(3, 131)
    #mapHeaders.findNPCs(3, 132)
    #mapHeaders.findNPCs(3, 133)
    #mapHeaders.findNPCs(3, 134)