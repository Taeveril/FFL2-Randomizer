import mmap
import FFL2R_io
import FFL2R_data

MAXINT = 255

class GamePrep:
    def __init__(self):
        pass

    def newTitleScreen(menuBlock:FFL2R_io.ScriptBlock, VERSION:float, seed:int):
        def infoPatchList(VERSION:float, seed:int)->list:
            def hexList(info:str, maxLength:int)->list:
                hexes = []
                for digit in info:
                    if digit.isdigit():
                        hexes.append(int(digit) + 0xB0)
                    else: #float w/ dot
                        hexes.append(0xF0)
                while len(hexes) < maxLength:
                    hexes.insert(0, 0xFF)
                return hexes

            finalList = [0x36, 0x03, 0xCB, 0x59, 0xD7, 0x81, 0xDC, 0xED, 0x53, 0xFF] #"Randomizer "
            finalList.extend(hexList(str(VERSION), 4))
            finalList.extend([0x05, 0x36, 0x03, 0xCC, 0xD8, 0x8F, 0xFF]) #"Seed "
            finalList.extend(hexList(str(seed), 10))
            finalList.extend([0x06, 0xFF, 0xFF, 0x2E, 0xFF, 0xCC, 0xE7, 0x6E, 0x54]) #truncate start/continue
            return finalList


        titleInfo = infoPatchList(VERSION, seed)
        menuBlock.replaceScript(20, [0x00, 0x0A, 0x14, 0x08] + titleInfo + [0x2E, 0xFF, 0xBC, 0x65, 0xE7, 0x56, 0xE8, 0xD8, 
                                                                                0x06, 0xFF, 0xA2, 0xB1, 0xB9, 0xB9, 0xB1, 0xFF, 
                                                                                0xCC, 0xCA, 0xCE, 0xBA, 0xCB, 0xBE, 0xFF, 0xCC, 
                                                                                0xC8, 0xBF, 0xCD, 0x05, 0xC5, 0xC2, 0xBC, 0xBE, 
                                                                                0xC7, 0xCC, 0xBE, 0xBD, 0xFF, 0xBB, 0xD2, 0xFF, 
                                                                                0xC7, 0xC2, 0xC7, 0xCD, 0xBE, 0xC7, 0xBD, 0xC8, 
                                                                                0x00])

    def leonsText(magi:int) -> list:
        match magi:
            case 0x00:
                magiString=[0xC9, 0x84, 0x53] #power
            case 0x01:
                magiString=[0xCC, 0xE3, 0xD8, 0x8F] #speed
            case 0x02:
                magiString=[0xC6, 0x59, 0xD4] #mana
            case 0x03:
                magiString=[0xBD, 0xD8, 0xD9, 0x8B, 0x80] #defense
            case 0x04:
                magiString=[0xBF, 0xDC, 0x5A] #fire
            case 0x05:
                magiString=[0xC2, 0xD6, 0xD8] #ice
            case 0x06:
                magiString=[0xCD, 0xDB, 0xE8, 0x7C, 0x53] #thunder
            case 0x07:
                magiString=[0xC9, 0xE2, 0x5F, 0x65] #poison
            case 0x08:
                magiString=[0xC6, 0x89, 0xE0, 0xE8, 0x92] #masmune
            case 0x09:
                magiString=[0xBA, 0xD8, 0xDA, 0x5F] #aegis
            case 0x0B:
                magiString=[0xC1, 0x75, 0xE5, 0xE7] #heart
            case 0x0C:
                magiString=[0xC9, 0xD8, 0xDA, 0x89, 0x8E] #pegasus
            case 0x0D:
                magiString=[0xC9, 0xE5, 0x5F, 0xE0] #prism
        magiString.append(0xF3)
        while len(magiString) < 6:
            magiString.append(0xFF)
        newScriptText = [0x06, 0xCB, 0xD8, 0xD6, 0xD8, 0xDC, 0x76, 0x57, 0x9E] + magiString +   [0x0B, 0x0D, 0x12, 0x11, 
                         0x10, 0x19, 0xF6, 0x33, 0x00, 0xFF, 0x19, 0xF6, 0x11, 0x00, 0xF1, 0x02, 0xFF, 0x19, 0xF6, 0x03, 
                         0x00, 0xFF, 0xC5, 0xD8, 0x65, 0xF5, 0xC9, 0x98, 0x89, 0xD8, 0xF1, 0xF1, 0x06, 0xFF, 0xBF, 0x66, 
                         0xDA, 0xDC, 0x76, 0x64, 0x4E, 0xF1, 0xF3, 0xF3, 0x11, 0x04, 0x0D, 0x19, 0xF0, 0x12, 0x19, 0xF6, 
                         0x13, 0x00, 0xF2, 0x13, 0xFF, 0x19, 0xF6, 0x21, 0x00, 0xFF, 0x13, 0x11, 0x14, 0x08, 0x06, 0x10, 
                         0x20, 0x1F, 0x00, 0xF5, 0xC5, 0xD8, 0x65, 0x63, 0x5D, 0x98, 0x58, 0xFF, 0x06, 0x9E] + magiString + [0x00]

        return newScriptText

    def newDropScripts(scriptingBlock1:FFL2R_io.ScriptBlock, scriptingBlock2:FFL2R_io.ScriptBlock):
        #gives Ashura and Venus new magi drop scripts
        scriptingBlock1.addNewScript([0x19, 0x0A, 0x00, 0x19, 0x0A, 0x01, 0x19, 0x0A, 0x02, 0x19, 0x0A, 0x04, 0x19, 0x0A, 0x05, 0x19, 0x0A, 
                                      0x06, 0x19, 0x0A, 0x07, 0x00])
        scriptingBlock1.addNewScript([0x19, 0x0A, 0x00, 0x19, 0x0A, 0x01, 0x19, 0x0A, 0x02, 0x19, 0x0A, 0x04, 0x19, 0x0A, 0x05, 0x19, 0x0A, 
                                      0x06, 0x19, 0x0A, 0x07, 0x00])
        #ashura
        scriptingBlock2.script[77].scriptData[348] = 0xC0
        #venus
        scriptingBlock1.script[43].scriptData[105] = 0xC1

    def memoRemove(scriptingBlock1:FFL2R_io.ScriptBlock, scriptingBlock2:FFL2R_io.ScriptBlock, menuBlock:FFL2R_io.ScriptBlock, 
                   memoBlock:FFL2R_io.ScriptBlock, romData:mmap):
        def clearMemoSetCalls(block:FFL2R_io.ScriptBlock):
            c1 = block.findScriptsByBytes([0x18])
            c2 = [x for x in c1 if block.script[x[0]].scriptData[x[1]-1] not in range(0x12, 0x1b)]
            c2.reverse()
            for x in c2:
                block.removeFromScript(x[0], x[1], x[1]+2)

        blocks = ((0x54c4, 4), (0x3e038,72))
        for addr in blocks:
            for i in range(0,addr[1]):
                romData[addr[0]+i] = 0x0
        menuBlock.removeFromScript(1,31,37)
        menuBlock.script[1].scriptData[3]=0x0d
        for x in FFL2R_data.GameData.noMemoCalls:
            memoBlock.replaceScript(x, [0x0])
   
        clearMemoSetCalls(scriptingBlock1)
        clearMemoSetCalls(scriptingBlock2)

    def kiShrineCleanup(scriptingBlock1:FFL2R_io.ScriptBlock, scriptingBlock2:FFL2R_io.ScriptBlock, mapHeaders:FFL2R_io.MapData):
        scriptingBlock1.addNewScript([0xba, 0xe6, 0xe6, 0x5f, 0xe7, 0x59, 0xe7, 0xf5, 0x8c, 0x61, 0xd4, 0x76, 0x06, 0xe6, 0x81, 0x85, 0x70, 0x6b, 0x7e, 0x66, 0x6f, 
                                      0x55, 0xf3, 0x00])
        scriptingBlock2.insertIntoScript(50, 0, [0x15, 0xc, 0x0, 0x19, 0x0, 0xc2, 0x0])
        mapHeaders.delNPC(11, 7)
        mapHeaders.header[11].npcs = [[0x00, 0x0e, 0x24, 0x25, 0x25, 0x11], [0x00, 0x0e, 0x28, 0x25, 0x27, 0x21], [0x00, 0x0e, 0x24, 0xa2, 0x29, 0x31], 
                                      [0x01, 0x0c, 0x14, 0x13, 0x2d, 0x51], [0x01, 0xde, 0x13, 0x0c, 0x2e, 0xd1], [0x01, 0x06, 0x12, 0xcc, 0x38, 0xe1], 
                                      [0x01, 0xde, 0x52, 0xcc, 0x32, 0xe1], [0x03, 0x5f, 0x12, 0xcc, 0x33, 0xe1], [0x01, 0x0e, 0x10, 0x11, 0x2b, 0x41], 0xff]
        scriptingBlock2.insertIntoScript(37, 0, [0x15, 0x1, 0xde, 0x19, 0x1, 0x26, 0x0])
        scriptingBlock2.insertIntoScript(39, 0, [0x15, 0x1, 0xde, 0x19, 0x1, 0x28, 0x0])
        scriptingBlock2.insertIntoScript(41, 0, [0x15, 0x1, 0xde, 0x19, 0x1, 0x2a, 0x0])
        scriptingBlock2.insertIntoScript(43, 0, [0x15, 0x1, 0xde, 0x19, 0x1, 0x2c, 0x0])
        scriptingBlock2.replaceScript(49, [0x0])
        scriptingBlock1.replaceScript(30, [0x15, 0xc, 0x6, 0x19, 0x1, 0x10, 0x0, 0x19, 0x0, 0x2f, 0x0])
        scriptingBlock1.insertIntoScript(31, 5, [0x12, 0xc])
        scriptingBlock1.insertIntoScript(32, 5, [0x12, 0xc])
        scriptingBlock1.insertIntoScript(33, 5, [0x12, 0xc])
        scriptingBlock1.insertIntoScript(34, 5, [0x12, 0xc])
        scriptingBlock1.insertIntoScript(35, 5, [0x12, 0xc])
        scriptingBlock1.insertIntoScript(36, 5, [0x12, 0xc])
        scriptingBlock1.replaceScript(37, [0x19, 0xa, 0x3, 0x12, 0x3, 0x12, 0xc, 0x14, 0x1, 0xf, 0x10, 0x14, 0xc, 0x0, 0xb, 0xd, 0x19, 0x5, 0xb0, 0x19, 0x7, 
                                           0x3, 0x0])
        scriptingBlock2.script[89].scriptData[37] = 0xc
        mapHeaders.header[54].npcs = [[0x4c, 0x77, 0x1a, 0x12, 0x59, 0x91], [0xc, 0x78, 0x5a, 0xcf, 0x25, 0xa0], 0xff]
        mapHeaders.header[22].npcs[0][1] = 0x55
        mapHeaders.header[38].npcs[0] = [0x42, 0x4, 0x15, 0xc5, 0x4d, 0x91]
        mapHeaders.header[38].npcs[1] = [0x42, 0x4, 0x56, 0xc5, 0x4d, 0x91]
        mapHeaders.header[38].npcs[2] = [0x42, 0x4, 0x95, 0xc6, 0x4d, 0x91]
        mapHeaders.header[38].npcs[3] = [0x42, 0x4, 0xd6, 0xc6, 0x4d, 0x91]
        scriptingBlock2.replaceScript(77, [0x19, 0x7, 0x12, 0xba, 0x93, 0x7d, 0xd4, 0xf5, 0xc1, 0xba, 0xf3, 0xff, 0xc1, 0xba, 0xf3, 0x6, 0xff, 0xd0, 0xd8, 
                                           0x67, 0xef, 0x61, 0xd8, 0x67, 0xe2, 0xf0, 0x6, 0x8c, 0x5e, 0x89, 0x58, 0xd5, 0x55, 0x54, 0x5d, 0x6, 0x63, 0x8b, 
                                           0x57, 0xe6, 0x81, 0xd8, 0x65, 0x4e, 0x5d, 0x6, 0x4f, 0xd8, 0x67, 0x6f, 0x55, 0xf1, 0x4f, 0x6a, 0xe7, 0xf1, 0x6, 
                                           0x9c, 0x72, 0xe0, 0x59, 0x58, 0xdf, 0x5a, 0xd4, 0xd7, 0xec, 0x6, 0x64, 0xdc, 0xd6, 0x91, 0xe1, 0xdc, 0xed, 0x8f, 
                                           0x58, 0x7c, 0x6, 0x5e, 0x8b, 0x54, 0x56, 0x5d, 0xff, 0xc4, 0xdc, 0x77, 0x6, 0x74, 0xe2, 0xd7, 0xec, 0xf3, 0x6, 
                                           0x20, 0x1f, 0x0, 0xf5, 0xd0, 0x6a, 0x54, 0xd7, 0xdc, 0x57, 0x6d, 0xe8, 0x6, 0x83, 0x5b, 0x5d, 0x61, 0x53, 0xf4, 
                                           0xf3, 0x6, 0xba, 0x93, 0x7d, 0xd4, 0xf5, 0xc4, 0xdc, 0x5e, 0x89, 0x74, 0x66, 0x73, 0xea, 0x87, 0xdb, 0x9c, 0xba, 
                                           0xc0, 0x79, 0x56, 0x61, 0x53, 0x6, 0x74, 0xe2, 0xd7, 0x72, 0xea, 0x70, 0xd6, 0xdb, 0x62, 0xd4, 0x76, 0x6, 0x61, 
                                           0x53, 0x4f, 0x51, 0xff, 0xe3, 0x84, 0x53, 0x69, 0xd9, 0x6, 0x61, 0x75, 0xdf, 0x56, 0xda, 0xf0, 0x6, 0x8c, 0x62, 
                                           0x85, 0x4f, 0xdb, 0xe2, 0x80, 0x9c, 0xba, 0xc0, 0xc2, 0x6, 0x58, 0x7c, 0x63, 0x51, 0x7e, 0xd4, 0xdc, 0xdf, 0xe6, 
                                           0xf3, 0xf3, 0x6, 0xff, 0xf1, 0xf1, 0xc4, 0xdc, 0x67, 0x56, 0x9b, 0xb2, 0x74, 0xdc, 0xe5, 0xd7, 0x52, 0xea, 0x87, 
                                           0xdb, 0xff, 0xb1, 0x63, 0x5d, 0x92, 0xf1, 0xf1, 0x6, 0xff, 0xd0, 0xd8, 0x67, 0xf1, 0xf1, 0xff, 0xc7, 0x84, 0x8c, 
                                           0x62, 0x85, 0x6, 0x6f, 0x55, 0xe5, 0x52, 0x59, 0x57, 0x50, 0x60, 0xee, 0x67, 0x64, 0xd4, 0xde, 0x4e, 0x87, 0xff, 
                                           0xb3, 0x74, 0xdc, 0xe5, 0xd7, 0xe6, 0xf3, 0xf3, 0x20, 0x1f, 0x0, 0xf5, 0xf1, 0xf1, 0xff, 0xc7, 0xd8, 0x76, 0xe5, 
                                           0xf3, 0xf3, 0xb, 0xd, 0x9, 0x83, 0x37, 0x19, 0x7, 0xc, 0x3e, 0xba, 0x93, 0x7d, 0xd4, 0xf5, 0xc7, 0xe2, 0xf1, 
                                           0xff, 0xc7, 0xe2, 0xf3, 0xf3, 0x6, 0xff, 0xf1, 0x8c, 0xff, 0xf1, 0x83, 0x65, 0xee, 0x54, 0xf1, 0x6, 0xff, 0xff, 
                                           0xf1, 0x5e, 0x59, 0xe1, 0x7b, 0xf1, 0x83, 0xdc, 0xd8, 0xf1, 0xff, 0xf1, 0x11, 0x30, 0xba, 0xcb, 0xcb, 0xc0, 
                                           0xc1, 0xf3, 0x11, 0x1, 0xd, 0x14, 0x2, 0x5, 0x10, 0x19, 0x0, 0xc0, 0xd, 0x19, 0x5, 0x4a, 0x10, 0x19, 0xf1, 0x3, 
                                           0xff, 0x1f, 0x4, 0xf5, 0xc2, 0xee, 0x76, 0x83, 0x65, 0xd8, 0x6, 0x5e, 0x6a, 0x54, 0x79, 0xea, 0x59, 0x7f, 0x57, 
                                           0x5d, 0xf0, 0x6, 0xff, 0xcc, 0xd8, 0x4e, 0x6d, 0xe8, 0xf3, 0x6, 0x6, 0x36, 0x3, 0x1f, 0x4, 0x8a, 0xd8, 0xd9, 
                                           0xe7, 0xf0, 0xb, 0xd, 0x14, 0x2, 0x6, 0x14, 0x0, 0x0, 0x10, 0x19, 0xf1, 0x0, 0xff, 0x20, 0x1f, 0x5, 0xf5, 0xc4, 
                                           0xdc, 0x64, 0x8e, 0x54, 0x95, 0x6, 0x5c, 0x73, 0x7b, 0xe7, 0x91, 0xe8, 0xd5, 0x98, 0xf3, 0x6, 0xff, 0xc5, 0x85, 
                                           0x77, 0x62, 0x5b, 0x5d, 0x61, 0x53, 0xf3, 0xb, 0xd, 0x19, 0xf0, 0x10, 0x19, 0x7, 0x8b, 0x19, 0x5, 0x22, 0x14, 
                                           0xe, 0x2, 0x0])
        mapHeaders.header[41].npcs[4] = [0x3, 0x0, 0x5f, 0x8b, 0x53, 0xd1]
        scriptingBlock2.replaceScript(83, [0x46, 0x20, 0x1f, 0x5, 0xf5, 0xbd, 0xf1, 0xff, 0xbd, 0xd4, 0xd7, 0xf3, 0xf3, 0x6, 0x19, 0x7, 0xa, 0xbf, 0x60, 
                                           0x51, 0xe5, 0xf5, 0xce, 0xdb, 0xf4, 0xff, 0x20, 0x1f, 0x5, 0xff, 0xf1, 0xf4, 0x6, 0x20, 0x1f, 0x5, 0xf5, 0xd2, 
                                           0x75, 0xdb, 0xf3, 0xf3, 0x6, 0xff, 0xcb, 0xd8, 0x6c, 0xe0, 0x95, 0x68, 0x6c, 0xf4, 0xf3, 0x6, 0xbf, 0x60, 0x51, 
                                           0xe5, 0xf5, 0xc8, 0xd9, 0x7a, 0x55, 0xe5, 0x80, 0xf3, 0x6, 0xff, 0xf1, 0xff, 0xc8, 0xdb, 0xef, 0xff, 0x20, 0x1f, 
                                           0x5, 0xff, 0xf1, 0xf1, 0x6, 0xff, 0xc1, 0x84, 0x77, 0x9c, 0x81, 0xf4, 0x6, 0x20, 0x1f, 0x5, 0xf5, 0xcc, 0x51, 
                                           0x77, 0x7e, 0x56, 0xd8, 0xf3, 0x6, 0xff, 0xf1, 0xff, 0xd0, 0xd4, 0x87, 0x56, 0x9b, 0xdb, 0x81, 0xd8, 0xf0, 0x6, 
                                           0xff, 0xc5, 0x85, 0x77, 0x62, 0x5b, 0xdb, 0x81, 0xd8, 0x6, 0x4f, 0xe2, 0xda, 0x85, 0x51, 0xe5, 0xef, 0xff, 0xbd, 
                                           0xd4, 0xd7, 0xf3, 0x6, 0xbf, 0x60, 0x51, 0xe5, 0xf5, 0xff, 0xf1, 0xff, 0xc7, 0x5b, 0xf1, 0x6, 0x8c, 0x7a, 0x59, 
                                           0xee, 0x54, 0xec, 0x85, 0xf0, 0x6, 0x20, 0x1f, 0x5, 0xf5, 0xbf, 0x66, 0x9c, 0xba, 0xc0, 0xc2, 0xf4, 0x6, 0xff, 
                                           0xbb, 0x86, 0xff, 0xf1, 0xff, 0xd0, 0x4e, 0xd7, 0xd8, 0xd9, 0x75, 0x7f, 0x57, 0xba, 0x93, 0x7d, 0xd4, 0xf3, 0x6, 
                                           0xbf, 0x60, 0x51, 0xe5, 0xf5, 0x99, 0x53, 0x4e, 0x6e, 0xd8, 0x6, 0x64, 0x66, 0x4e, 0x8d, 0x4f, 0xdb, 0xe2, 0x80, 
                                           0x6, 0x8a, 0xdc, 0xde, 0x4e, 0xba, 0x93, 0x7d, 0x7b, 0xf1, 0x6, 0x62, 0xe2, 0x56, 0x9b, 0xd4, 0xd9, 0x7f, 0x68, 
                                           0xc6, 0xba, 0xc0, 0xc2, 0xf0, 0x20, 0x1f, 0x5, 0xf5, 0xc6, 0xba, 0xc0, 0xc2, 0xf1, 0xff, 0xd0, 0xd8, 0xee, 0x76, 
                                           0x6, 0x62, 0xe2, 0x54, 0xe6, 0x81, 0xd8, 0xf3, 0xff, 0xc1, 0x53, 0xd8, 0xf3, 0xf3, 0x6, 0xbf, 0x60, 0x51, 0xe5, 
                                           0xf5, 0xd2, 0x55, 0xee, 0x5a, 0x6, 0x62, 0x60, 0x51, 0xe5, 0x56, 0x9b, 0x50, 0xd8, 0xe0, 0xef, 0x6, 0x4f, 0xe2, 
                                           0xe2, 0xf4, 0xf3, 0x6, 0xff, 0x99, 0x8b, 0xef, 0x4f, 0xd4, 0xde, 0x4e, 0x50, 0x5f, 0xf3, 0x6, 0xb, 0xd, 0x19, 
                                           0xa, 0x0, 0x6, 0xbf, 0x60, 0x51, 0xe5, 0xf5, 0xc7, 0xe2, 0xd5, 0xe2, 0xd7, 0xec, 0x6, 0x5e, 0x55, 0xdf, 0x57, 
                                           0xdc, 0xe0, 0xd4, 0xda, 0x56, 0xd8, 0x6, 0x4f, 0x6a, 0x54, 0xde, 0xdc, 0xd7, 0x52, 0xdf, 0xdc, 0xde, 0xd8, 0x6, 
                                           0x6f, 0x55, 0x61, 0xd4, 0x76, 0x63, 0xe8, 0xd6, 0xdb, 0x6, 0x58, 0x4f, 0x70, 0x6b, 0xf0, 0x6, 0x20, 0x1f, 0x5, 
                                           0xf5, 0xc2, 0xee, 0xe0, 0x90, 0xe2, 0xe7, 0x6, 0x58, 0xff, 0xde, 0xdc, 0x57, 0x59, 0xec, 0xe0, 0x66, 0xd8, 0xf0, 
                                           0x6, 0xbf, 0x60, 0x51, 0xe5, 0xf5, 0xd0, 0xd8, 0xee, 0x67, 0x64, 0xd8, 0x85, 0x6, 0x58, 0xda, 0xd4, 0x56, 0x58, 
                                           0x52, 0x9d, 0x6b, 0x58, 0xe6, 0x6, 0x5e, 0x4e, 0x71, 0x58, 0xd9, 0x7f, 0x68, 0xc6, 0xba, 0xc0, 0xc2, 0xf0, 0x8c, 
                                           0xee, 0x67, 0x7a, 0x81, 0x4e, 0xdb, 0x81, 0xd8, 0x6, 0x5e, 0x87, 0xdb, 0x6f, 0x55, 0x4f, 0x51, 0xe1, 0xf0, 0x6, 
                                           0x20, 0x1f, 0x5, 0xf5, 0xc9, 0x91, 0xe0, 0x5f, 0xd8, 0xf4, 0x6, 0xbf, 0x60, 0x51, 0xe5, 0xf5, 0xf1, 0xf1, 0xff, 
                                           0xd2, 0xd8, 0xe6, 0xf0, 0x6, 0x8c, 0xff, 0xc9, 0x91, 0xe0, 0x5f, 0xd8, 0xf0, 0x6, 0x14, 0x3, 0x1, 0x10, 0x20, 
                                           0x1f, 0x5, 0xf5, 0xc8, 0xde, 0xd4, 0xec, 0xef, 0xff, 0xbd, 0xd4, 0x57, 0xf1, 0xf1, 0x6, 0xff, 0xf1, 0xf1, 0xff, 
                                           0xe3, 0x91, 0xe0, 0x5f, 0x4e, 0xf1, 0xf1, 0x6, 0x14, 0x18, 0x5, 0x0])
        scriptingBlock2.script[87].scriptData[209] = 0x2f
        scriptingBlock1.script[79].scriptData[2] = 0x1
        scriptingBlock1.script[79].scriptData[9] = 0x22
        scriptingBlock1.script[79].scriptData[11] = 0x3
        scriptingBlock1.script[79].scriptData[12] = 0x3
        mapHeaders.header[39].npcs[0][1] = 0x3
        scriptingBlock1.script[28].scriptData[2] = 0x33
        scriptingBlock2.script[78].scriptData[17] = 0x4
        scriptingBlock2.replaceScript(46, [0x4b, 0xb3, 0xf3, 0x6, 0xc0, 0xdc, 0x59, 0xe7, 0x52, 0x93, 0x55, 0xdf, 0xd7, 0x6, 0xde, 0x88, 0xea, 0x61, 0x84, 
                                           0xf0, 0xff, 0x15, 0xc, 0x0, 0x19, 0x1, 0x34, 0x0, 0x0])
        scriptingBlock2.replaceScript(47, [0x20, 0x1f, 0x5, 0xf5, 0xbd, 0x5b, 0x6d, 0x9a, 0xde, 0x88, 0xea, 0x6, 0x58, 0xe1, 0xec, 0x50, 0x56, 0x9b, 0xd4, 
                                           0xd5, 0x55, 0xe7, 0x6, 0x4f, 0x51, 0x9c, 0xba, 0xc0, 0xc2, 0xf4, 0x6, 0xc4, 0xdc, 0xf5, 0xd0, 0x6a, 0x54, 0xea, 
                                           0xdc, 0x67, 0x6f, 0x55, 0x6, 0x83, 0x5b, 0xea, 0x87, 0xdb, 0x4f, 0x51, 0xe0, 0xf4, 0x6, 0xff, 0xbb, 0x4e, 0x7b, 
                                           0x71, 0xd7, 0xf4, 0x6, 0x20, 0x1f, 0x6, 0xf5, 0xc7, 0x5b, 0xea, 0xd4, 0xec, 0xf3, 0x6, 0xff, 0x20, 0x1f, 0x5, 
                                           0x77, 0x7e, 0x60, 0x51, 0x68, 0x5f, 0x6, 0x62, 0xe2, 0x56, 0x9b, 0xd4, 0xd9, 0x7f, 0x68, 0xc6, 0xba, 0xc0, 0xc2, 
                                           0xf0, 0xff, 0xd0, 0xd8, 0xee, 0x5a, 0x8a, 0xe2, 0xe2, 0xde, 0x56, 0xda, 0x6, 0x7e, 0x66, 0x61, 0xdc, 0xe0, 0xf0, 
                                           0x6, 0xc4, 0xdc, 0xf5, 0x99, 0x60, 0x64, 0x59, 0x5e, 0x87, 0xdb, 0x6, 0x58, 0x61, 0x60, 0x69, 0xe1, 0xf4, 0x6, 
                                           0x20, 0x1f, 0x5, 0xf5, 0xbd, 0x5b, 0x6d, 0x9a, 0xde, 0x88, 0xea, 0xf4, 0x6, 0xff, 0xd0, 0x51, 0x5a, 0x83, 0xdc, 
                                           0x57, 0x51, 0x62, 0xe2, 0xf4, 0x6, 0xc4, 0xdc, 0xf5, 0xc1, 0x4e, 0xd7, 0x91, 0xe3, 0xe3, 0x8f, 0x5c, 0xe1, 0xef, 
                                           0x6, 0x58, 0xe6, 0xde, 0x8f, 0x64, 0x4e, 0xd4, 0xd5, 0x55, 0xe7, 0x6, 0x9c, 0xba, 0xc0, 0xc2, 0xef, 0x58, 0x7c, 
                                           0x8a, 0xd8, 0xd9, 0xe7, 0xf0, 0x6, 0x20, 0x1f, 0x5, 0xf5, 0xc8, 0xdb, 0xf1, 0xf1, 0xff, 0xc8, 0xde, 0xd4, 0xec, 0xf0, 
                                           0x6, 0xff, 0x99, 0x59, 0xde, 0xe6, 0xf1, 0xb, 0xd, 0x19, 0xf1, 0x10, 0xff, 0xc4, 0xdc, 0xf5, 0xd0, 0xd4, 0x87, 0xf3, 
                                           0x6, 0x19, 0xf1, 0x11, 0xff, 0x11, 0x8, 0xc4, 0xdc, 0xf5, 0xc9, 0xd8, 0xe2, 0xe3, 0x98, 0x63, 0xd4, 0x72, 0x50, 0x60, 
                                           0x4f, 0x51, 0x5a, 0x58, 0x5a, 0x9c, 0xba, 0xc0, 0xc2, 0x6, 0x5c, 0x73, 0x50, 0x4e, 0x5a, 0xdf, 0xdc, 0xd6, 0x52, 0x8d, 
                                           0x6, 0x4f, 0x51, 0x58, 0xe1, 0xd6, 0xdc, 0x8b, 0x54, 0x71, 0xd7, 0xe6, 0xf0, 0x8c, 0xe7, 0x77, 0xff, 0xb4, 0x4f, 0x5b, 
                                           0x50, 0xd8, 0x6, 0xff, 0x75, 0x78, 0x58, 0x7c, 0xff, 0xb3, 0x4f, 0x5b, 0x50, 0xd8, 0x6, 0x63, 0x55, 0x50, 0x7e, 0x91, 
                                           0xe0, 0x4f, 0x51, 0x6, 0xff, 0xbb, 0xdc, 0x9b, 0xcb, 0xe2, 0xd6, 0xde, 0x5c, 0x73, 0x50, 0xd8, 0x6, 0xff, 0xcc, 0x55, 
                                           0x50, 0x53, 0x73, 0xbf, 0x66, 0xd8, 0x78, 0xf0, 0xb, 0x14, 0x1, 0x3, 0x10, 0x0])
        scriptingBlock2.replaceScript(48, [0x6, 0xff, 0xd0, 0x6a, 0xe7, 0xf4, 0x6, 0xff, 0xba, 0x93, 0x7d, 0xd4, 0x77, 0x64, 0x8b, 0x4f, 0xe2, 0xe2, 0xde, 0x6, 
                                           0x4f, 0x51, 0x9c, 0xba, 0xc0, 0xc2, 0xf4, 0x6, 0x20, 0x1f, 0x5, 0xf5, 0xd0, 0x4e, 0x6e, 0x4e, 0x71, 0x56, 0xda, 0x6, 
                                           0x4f, 0x5b, 0x50, 0x4e, 0xba, 0x93, 0x7d, 0xd4, 0x77, 0x6, 0xff, 0xbb, 0x89, 0xd8, 0xf0, 0x6, 0xc4, 0xdc, 0xf5, 0xc2, 
                                           0xee, 0xe0, 0x7a, 0x81, 0x56, 0x9b, 0xea, 0x87, 0xdb, 0x6f, 0x55, 0xf0, 0x8c, 0x64, 0x8e, 0x54, 0xe6, 0xd4, 0x76, 0x6, 
                                           0x4f, 0x70, 0x52, 0xea, 0x66, 0xdf, 0x57, 0xd9, 0x91, 0xe0, 0x6, 0xff, 0xba, 0x93, 0x7d, 0xd4, 0xf0, 0xb, 0xd, 0x14, 
                                           0x1, 0x7, 0x14, 0x0, 0x2, 0x10, 0x19, 0x0, 0xf, 0x0])
        scriptingBlock2.replaceScript(56, [0xc4, 0xdc, 0xf5, 0xc2, 0xee, 0x67, 0x61, 0x75, 0x96, 0x6d, 0xe8, 0xf3, 0x6, 0x19, 0x1, 0x7c, 0xff, 0xc8, 0xde, 0xd4, 
                                           0xec, 0xf3, 0xff, 0xba, 0x67, 0x83, 0x65, 0xd8, 0xf3, 0xf3, 0x6, 0x15, 0x1, 0x56, 0x19, 0x1, 0x30, 0x0, 0x15, 0x1, 
                                           0x2, 0x19, 0x1, 0x2f, 0x0, 0x0])
        scriptingBlock2.insertIntoScript(52, 0, [0x12, 0xc])

    def convertToRealChests(scriptingBlock1:FFL2R_io.ScriptBlock, mapHeaders:FFL2R_io.MapData, treasureFlags:list):
        scriptingBlock1.replaceScript(38, [0x1b, 0xa, 0x19, 0x0, 0x5b, 0x0, 0x19, 0x5, 0xb4, 0x19, 0x7, 0xe, 0xc2, 0xe7, 0x77, 0x4f, 0xe2, 0x5b, 0xd5, 0xe5, 
                                            0xdc, 0xda, 0xdb, 0xe7, 0xf3, 0x6, 0x79, 0x97, 0xe1, 0x88, 0x54, 0x80, 0xd8, 0x6, 0x59, 0xec, 0x50, 0x56, 0xda, 
                                            0xf3, 0xf3, 0x0])
        scriptingBlock1.replaceScript(91, [0x19, 0x5, 0xb5, 0x19, 0xf0, 0x12, 0x19, 0x7, 0xb, 0x36, 0x3, 0xcc, 0xd8, 0x4e, 0xea, 0xd8, 0x67, 0x5e, 0x87, 0xdb, 
                                           0x6, 0x36, 0x3, 0x9e, 0xff, 0xcd, 0xe5, 0xe8, 0x4e, 0xbe, 0xec, 0x4e, 0xf3, 0xf3, 0x0])
        mapHeaders.header[65].npcs[2] = [0x80, treasureFlags[0], 0x20, 0xd9, 0xa, 0xfa]
        treasureFlags.pop(0)
        scriptingBlock1.replaceScript(86, [0x0])
        nastyDungeonMagi = scriptingBlock1.script[94].scriptData[10]
        chests = []
        for x in range(3, 7):
            chests.append(mapHeaders.header[202].npcs[x])
        mapHeaders.delNPC(202, 6)
        mapHeaders.addNPC(202, 0, [0x80, treasureFlags[0], 0x4, 0xc6, nastyDungeonMagi, 0xfa])
        treasureFlags.pop(0)
        for chest in chests:
            mapHeaders.addNPC(202, 0, chest)
        scriptingBlock1.replaceScript(94, [0x0])


class Utility:
    def __init__(self):
        pass

    def dteTranslate(strList:list)->str:
        result = ""
        for char in strList:
            try:
                result = result + (FFL2R_data.GameData.dteLookup[char])
            except:
                result = result + " " + (str(char))
        return result

    def listToHex(intList:list)->list:
        return [hex(x) for x in intList]

    def setBoundaries(num:int, floor:int, ceiling:int) -> int:
        if num < floor:
            num = floor
        elif num > ceiling:
           num = ceiling
        return num

    def findCoordinate(byte:int)->int:
        return ((byte & 0x3f) | (((byte & 0x3f) >> 4) << 4))

    def remainingBytes(byte:int, sub:int)->int:
        return ((byte - sub) & 0xf0) >> 6


    # def lockInfo(MAXINT:int, rom:mmap) -> mmap:
    #     i=0x2c032
    #     while i <= 0x2c183:
    #         if (rom[i] + 11) > MAXINT:
    #             carryOver = rom[i]
    #             carryOver +=11
    #             carryOver -=256
    #             rom[i] = carryOver
    #             i+=1
    #             rom[i]+=1
    #         else:
    #             rom[i]+=11
    #         i+=1

    #     lock0 = [0xBE, 0xEB, 0x87, 0xF5, 0x06, 0x9E, 0xFF, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x03, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Exit, but lets repurpose this for Ashura
    #     lock1 = [0xC4, 0xDC, 0x77, 0xFF, 0xC1, 0x75, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x17, 0x19, 0x01, 0x10, 0x00, 0x19, 0x00, 0x2F, 0x00] #Ki's Head
    #     lock2 = [0xCF, 0xD4, 0xDF, 0x6A, 0x67, 0xD4, 0xF5, 0x06, 0x9E, 0xB6, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x43, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Valhalla
    #     lock3 = [0xC1, 0x55, 0x80, 0xF5, 0x06, 0x9E, 0xB1, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x11, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #House
    #     lock4 = [0xC0, 0xDC, 0x59, 0xE7, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB1, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x0E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Giant's World
    #     lock5 = [0xBA, 0xE3, 0xE2, 0x67, 0xE2, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x18, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Apollo's World
    #     lock6 = [0xC0, 0xE8, 0x6E, 0xD7, 0xDC, 0x59, 0x77, 0xFF, 0xBB, 0x89, 0xD8, 0xF5, 0x06, 0x9E, 0xB3, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x22, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Guardian's Base
    #     lock7 = [0xC7, 0x56, 0xDD, 0xD4, 0xF5, 0x06, 0x9E, 0xB3, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x26, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #ninja
    #     lock8 = [0xCF, 0x8B, 0x8E, 0xEE, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB4, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x29, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Venus' World
    #     lock9 = [0xCB, 0xD4, 0xD6, 0x4E, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB5, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x3A, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #Race World
    #     locka = [0xBE, 0xD7, 0xE2, 0xF5, 0x06, 0x9E, 0xB6, 0xB3, 0xF5, 0x2C, 0x06, 0x1A, 0x3E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #edo
    #     lockb = [0xC7, 0x89, 0xE7, 0x72, 0xBD, 0xE8, 0x6B, 0xD8, 0x65, 0xF5, 0x06, 0x9E, 0xB6, 0xB7, 0xF5, 0x2C, 0x06, 0x1A, 0x42, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #nasty dungeon
    #     lockc = [0xBC, 0x8B, 0xE7, 0x82, 0x96, 0xC9, 0xDC, 0x67, 0x6E, 0xF5, 0x06, 0x9E, 0xFF, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x00, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00] #central pillar

    # print(FFL2R_utils.Utility.dteTranslate([0xBE, 0xEB, 0x87, 0xF5, 0x06, 0x9E, 0xFF, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x03, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Exit, but lets repurpose this for Ashura
    # print(FFL2R_utils.Utility.dteTranslate([0xC4, 0xDC, 0x77, 0xFF, 0xC1, 0x75, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB4, 0xF5, 0x2C, 0x06, 0x1A, 0x17, 0x19, 0x01, 0x10, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Ki's Head
    # print(FFL2R_utils.Utility.dteTranslate([0xCF, 0xD4, 0xDF, 0x6A, 0x67, 0xD4, 0xF5, 0x06, 0x9E, 0xB6, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x43, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Valhalla
    # print(FFL2R_utils.Utility.dteTranslate([0xC1, 0x55, 0x80, 0xF5, 0x06, 0x9E, 0xB1, 0xB8, 0xF5, 0x2C, 0x06, 0x1A, 0x11, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #House
    # print(FFL2R_utils.Utility.dteTranslate([0xC0, 0xDC, 0x59, 0xE7, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB1, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x0E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Giant's World
    # print(FFL2R_utils.Utility.dteTranslate([0xBA, 0xE3, 0xE2, 0x67, 0xE2, 0x77, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB2, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x18, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Apollo's World
    # print(FFL2R_utils.Utility.dteTranslate([0xC0, 0xE8, 0x6E, 0xD7, 0xDC, 0x59, 0x77, 0xFF, 0xBB, 0x89, 0xD8, 0xF5, 0x06, 0x9E, 0xB3, 0xB5, 0xF5, 0x2C, 0x06, 0x1A, 0x22, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Guardian's Base
    # print(FFL2R_utils.Utility.dteTranslate([0xC7, 0x56, 0xDD, 0xD4, 0xF5, 0x06, 0x9E, 0xB3, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x26, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #ninja
    # print(FFL2R_utils.Utility.dteTranslate([0xCF, 0x8B, 0x8E, 0xEE, 0xFF, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB4, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x29, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Venus' World
    # print(FFL2R_utils.Utility.dteTranslate([0xCB, 0xD4, 0xD6, 0x4E, 0xD0, 0x66, 0xDF, 0xD7, 0xF5, 0x06, 0x9E, 0xB5, 0xB9, 0xF5, 0x2C, 0x06, 0x1A, 0x3A, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #Race World
    # print(FFL2R_utils.Utility.dteTranslate([0xBE, 0xD7, 0xE2, 0xF5, 0x06, 0x9E, 0xB6, 0xB3, 0xF5, 0x2C, 0x06, 0x1A, 0x3E, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #edo
    # print(FFL2R_utils.Utility.dteTranslate([0xC7, 0x89, 0xE7, 0x72, 0xBD, 0xE8, 0x6B, 0xD8, 0x65, 0xF5, 0x06, 0x9E, 0xB6, 0xB7, 0xF5, 0x2C, 0x06, 0x1A, 0x42, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #nasty dungeon
    # print(FFL2R_utils.Utility.dteTranslate([0xBC, 0x8B, 0xE7, 0x82, 0x96, 0xC9, 0xDC, 0x67, 0x6E, 0xF5, 0x06, 0x9E, 0xFF, 0xB1, 0xF5, 0x2C, 0x06, 0x1A, 0x00, 0x19, 0x01, 0x37, 0x00, 0x19, 0x00, 0x2F, 0x00])) #central pillar

        #j=0x2ca18
        #while j <= 0x2eae0:

    # memoset = scriptingBlock2.findScriptsByBytes([0x18])
    # memoset.reverse()
    # for cmd in memoset:
    #     if cmd[0] not in (17, 236, 248, 74, 83):
    #         del scriptingBlock2.script[cmd[0]].scriptData[cmd[1]:cmd[1]+2]
    #         scriptingBlock2.addBytes(cmd[0], -2)


    # print(f"""
    # var-inc 1:{scriptingBlock1.findScriptsByBytes([0x12, 0x1f, 0x1])}
    # var-inc 2:{scriptingBlock2.findScriptsByBytes([0x12, 0x1f, 0x1])}
    # var-dec 1:{scriptingBlock1.findScriptsByBytes([0x13, 0x1f, 0x1])}
    # var-dec 2:{scriptingBlock2.findScriptsByBytes([0x13, 0x1f, 0x1])}
    # var-set 1:{scriptingBlock1.findScriptsByBytes([0x14, 0x1f, 0x1])}
    # var-set 2:{scriptingBlock2.findScriptsByBytes([0x14, 0x1f, 0x1])}
    # var-test 1:{scriptingBlock1.findScriptsByBytes([0x15, 0x1f, 0x1])}
    # var-test 2:{scriptingBlock2.findScriptsByBytes([0x15, 0x1f, 0x1])}
    # NPCs: {mapHeaders.findNPCs(0,31)}""")
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[55].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[56].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[57].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[58].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[59].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[78].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[80].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock1.script[95].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[193].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[201].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[202].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[203].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[204].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[205].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[206].scriptData))
    #print(FFL2R_utils.Utility.listToHex(scriptingBlock2.script[207].scriptData))
    #mapHeaders.findNPCs(3, 129)
    #mapHeaders.findNPCs(3, 130)
    #mapHeaders.findNPCs(3, 131)
    #mapHeaders.findNPCs(3, 132)
    #mapHeaders.findNPCs(3, 133)
    #mapHeaders.findNPCs(3, 134)