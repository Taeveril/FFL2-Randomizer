import mmap
import FFL2R_io

class AssemblyFixes:
    def __init__(self):
        pass

    #map 193 has a badly-defined trigger that this fixes
    def missingTrigger(rom:mmap):
        rom[0x1e292] = 0x09

    #elemental magi fix, mana magi affinity enable
    def magiFix(rom:mmap):
        adjustments = {
            0x32e29 : 0x0C, #elemental magi fix
            0x337ac : 0x40,
            0x337ad : 0x40,
            0x337b4 : 0x20,
            0x337b5 : 0x20,
            0x33c42 : 0x2A
        }
        for k,v in adjustments.items():
            rom[k] = v

    #fixes mutants so they can gain str
    def mutantStr(rom:mmap):
        rom[0x3119c] = 0x08

    #fixes gold drops when there is mutliple groups of enemies, written by tehtmi
    def goldDropFix(rom:mmap):
        asmmove = {
            0x30d0d: [0x02, 0x12, 0x4D, 0x06, 0x06],
            0x30d30: [0x02, 0x53, 0x4D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
                        0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06],
            0x34292: [0xCD, 0xCC, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00],
            0x345cc: [0x21, 0x77, 0xCF, 0xAF, 0x22, 0x22, 0x77, 0x06, 0x05, 0x3E, 0xD0, 0x80, 0x67, 0x2E, 0x00, 0x7E, 0xB7, 0x28, 0x50, 0x4F, 0x2E, 0x0A, 
                        0x7E, 0x21, 0x50, 0x7C, 0xC7, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 0xE6, 0x1F, 0x07, 0x21, 0x50, 0x7E, 0xC7, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 
                        0x23, 0x5F, 0x3E, 0x0C, 0xCD, 0xD2, 0x00, 0x6B, 0x67, 0xAF, 0x57, 0x5F, 0xD5, 0xE5, 0x57, 0x1E, 0x0A, 0xCD, 0x5F, 0x01, 0x57, 0x59, 
                        0xCD, 0x5C, 0x01, 0xE5, 0xD5, 0xF8, 0x04, 0x54, 0x5D, 0xF8, 0x00, 0xCD, 0x62, 0x01, 0xE8, 0x04, 0xE1, 0x57, 0x59, 0xCD, 0x5C, 0x01, 
                        0xD5, 0x11, 0x77, 0xCF, 0xF8, 0x00, 0xCD, 0x62, 0x01, 0xE8, 0x04, 0x04, 0x78, 0xFE, 0x08, 0x38, 0xA0, 0x3E, 0x08, 0xCD, 0x7D, 0x01, 
                        0x61, 0x43, 0x0D, 0xFA, 0x45, 0xD8, 0xC9]
            }

        for k,v in asmmove.items():
            for i in range(len(v)):
                rom[k+i] = v[i]

class ScriptedFixes:
    def __init__(self):
        pass

    def centralPillarUnlocks(scriptingBlock1:FFL2R_io.ScriptBlock, mapHeaders:FFL2R_io.MapData):
    # All MAGI checks are an invisible npc that otherwise halts the player if they fail to meet the requirement -- "We need more MAGI to open this door!"
    # this can put the player in a rough state if the player Teleports/Pegasus/ItemDoor's to a world where they cannot escape, usually happens when 
    # Apollo steals MAGI. This function makes it so that once the magi check passes, the NPC vanishes and does not respawn.
    # Functionally, all these checks use script variable 16. The "opened" script increments the state, pulls the player through into the door,
    # and then decrements the state. This edits the script to not decrement while putting a max state on these NPCs so they do not respawn.
       scriptingBlock1.replaceScript(47, [0x12, 0x10, 0x10, 0x06, 0x36, 0x05, 0xC8, 0xE3, 0x8B, 0x8F, 0xF3, 0x0B, 0x0D, 0x19, 0xF0, 
                                           0x01, 0xFF, 0x00])
       doorLocks = {
               23 : 0x01, #to giant world, map 23
               39 : 0x02, #giant house, map 39 npc1
               40 : 0x04, #to apollo world 40
               47 : 0x03, #to Ki's head, wholly unnecessary but nice to be consistent map 47
               56 : 0x05, #to guardian world map 56
               84 : 0x06, #to ninja world map 84
               100 : 0x07, #to venus world map 100
               103 : 0x08, #to race world map 103
               125 : 0x09, #to edo map 125
               136 : 0x0A, #to nasty dungeon world map 136
               161 : 0x0B, #to valhalla map 161
               174 : 0x0C, #to central world map 174 npc14
               175 : 0x0A  #map 175 back to valhalla. Maybe a bug since it checks for 66 Magi (to Edo) which is script 76, rather than 76 MAGI; but all irrelevant since it's meant to block you into final world.
               }

       for k,v in doorLocks.items():
           match k:
               case 39:
                    npcTarget = 1
               case 174:
                    npcTarget = 14
               case _:
                    npcTarget = 0
           mapHeaders.header[k].npcs[npcTarget][1] = v

    def moveMrS(scriptingBlock1:FFL2R_io.ScriptBlock, mapHeaders:FFL2R_io.MapData):
        #MrS blocks the first cave exit due to some poor scripting. Fixing the scripting lets us move MrS out of the way. 
        scriptingBlock1.insertIntoScript(19, 0, [0x15, 0x1, 0x1f, 0x19, 0x5, 0x16, 0xe])
        mapHeaders.header[4].npcs[0][0] = 0x01
        mapHeaders.header[5].npcs[1] = [0x01, 0x2F, 0xEF, 0x0A, 0x18, 0xA1]

    def fixTheRace(scriptingBlock1:FFL2R_io.ScriptBlock, scriptingBlock2:FFL2R_io.ScriptBlock, mapHeaders:FFL2R_io.MapData):
        #Puts a dismount on the teleport scripts. Also changes var usage around to be cleaner.
        scriptingBlock1.replaceScript(55, [0x33, 0xe8, 0x3, 0x19, 0xf0, 0x8, 0x19, 0x0, 0x4e, 0x0])
        scriptingBlock1.replaceScript(56, [0x33, 0x20, 0x3, 0x19, 0xf0, 0x9, 0x19, 0x0, 0x4e, 0x0])
        scriptingBlock1.replaceScript(57, [0x33, 0x58, 0x2, 0x19, 0xf0, 0xa, 0x19, 0x0, 0x4e, 0x0])
        scriptingBlock1.replaceScript(58, [0x19, 0xf0, 0xb, 0x19, 0x0, 0x4e, 0x0])
        scriptingBlock1.replaceScript(59, [0x15, 0x19, 0x1, 0x19, 0x1, 0xc7, 0x0, 0x19, 0x1, 0xc8, 0x0])
        scriptingBlock1.replaceScript(78, [0xd, 0x19, 0x6, 0x2d, 0x19, 0x7, 0x0, 0xcb, 0x75, 0xd7, 0xec, 0xf1, 0xf1, 0x6, 0xc0, 0x85, 0x63, 0x85, 0xf1, 0xf1, 
                                                 0xb, 0xd, 0x12, 0x11, 0x10, 0x19, 0xf1, 0x53, 0xff, 0x36, 0x6, 0x19, 0x7, 0xa8, 0xc0, 0xc8, 0xf3, 0x19, 0xf6, 0x53, 
                                                 0x0, 0xf6, 0x53, 0x1, 0xf6, 0x53, 0x2, 0xff, 0xd, 0x13, 0x11, 0x10, 0xc8, 0xe2, 0xe2, 0xe2, 0xe3, 0xe6, 0xf3, 0x6,
                                                 0xbf, 0xd8, 0x67, 0x58, 0x74, 0x87, 0x74, 0xd8, 0x70, 0x7c, 0xf3, 0x11, 0x10, 0xd, 0x19, 0x7, 0xb, 0x14, 0x18, 0xa,
                                                 0x15, 0x19, 0x0, 0x14, 0x19, 0x1, 0x31, 0x0])
        scriptingBlock1.replaceScript(80, [0x15, 0x1f, 0x0, 0x19, 0x1, 0xdb, 0x0, 0x19, 0xf1, 0x30, 0xff, 0x19, 0x7, 0x3, 0xc0, 0xc8, 0xba, 0xc5, 0xf3, 0xf3, 
                                                 0x6, 0x99, 0x4e, 0xea, 0x56, 0x92, 0x68, 0x5f, 0x6, 0x20, 0x1f, 0x0, 0x77, 0xff, 0xcd, 0x75, 0xe0, 0xf3, 0xb, 0xd, 
                                                 0x19, 0xf0, 0x5, 0xbc, 0x65, 0xda, 0x82, 0xe7, 0xe8, 0xdf, 0x60, 0xdc, 0x65, 0xe6, 0xf3, 0xb, 0xd,  
                                                 0x14, 0x12, 0x0, 0x14, 0x19, 0x6, 0x19, 0x6, 0x3a, 0x19, 0x7, 0xc, 0x0])
        scriptingBlock1.replaceScript(95, [0x19, 0xf0, 0x5, 0x15, 0x1d, 0x2, 0x19, 0x0, 0x5d, 0x31, 0x14, 0xf, 0x3, 0x19, 0xf0, 0x10, 0x19, 0x7, 0x8b, 0x19, 
                                                 0x7, 0xc, 0x0])
        scriptingBlock2.replaceScript(193, [0x4b, 0x55, 0xf3, 0x0])
        scriptingBlock2.replaceScript(201, [0x15, 0x1f, 0x0, 0x19, 0x1, 0xdb, 0x0, 0x15, 0x19, 0x2f, 0x19, 0x6, 0x37, 0x0, 0x15, 0x1f, 0x2f, 0x19, 0x6, 0x37, 
                                                  0x0, 0x12, 0x11, 0x10, 0x11, 0x10, 0x9, 0x6, 0x13, 0x11, 0x12, 0x12, 0x14, 0x19, 0x2, 0x10, 0x19, 0xa, 0x1, 0xd, 
                                                  0x19, 0x6, 0x37, 0x0])
        scriptingBlock2.replaceScript(202, [0x15, 0x1f, 0x0, 0x19, 0x1, 0xdb, 0x0, 0x15, 0x19, 0x3f, 0x19, 0x6, 0x38, 0x0, 0x15, 0x1f, 0x3f, 0x19, 0x6, 0x38, 
                                                  0x0, 0x12, 0x11, 0x10, 0x11, 0x10, 0x9, 0x37, 0x13, 0x11, 0x12, 0x12, 0x14, 0x19, 0x3, 0x10, 0x19, 0xa, 0x2, 0xd, 
                                                  0x19, 0x6, 0x38, 0x0])
        scriptingBlock2.replaceScript(203, [0x15, 0x1f, 0x0, 0x19, 0x1, 0xdb, 0x0, 0x15, 0x19, 0x4f, 0x19, 0x6, 0x39, 0x0, 0x15, 0x1f, 0x4f, 0x19, 0x6, 0x39, 
                                                  0x0, 0x12, 0x11, 0x10, 0x11, 0x10, 0x9, 0x7, 0x13, 0x11, 0x12, 0x12, 0x14, 0x19, 0x4, 0x10, 0x19, 0xa, 0x5, 0xd, 
                                                  0x19, 0x6, 0x39, 0x0])
        scriptingBlock2.replaceScript(204, [0x15, 0x1f, 0x0, 0x19, 0x1, 0xdb, 0x0, 0x15, 0x19, 0x5f, 0x19, 0x0, 0x0, 0x0, 0x12, 0x11, 0x10, 0x11, 0x10, 0x9, 
                                                  0x87, 0x13, 0x11, 0x10, 0x19, 0xa, 0x6, 0x15, 0x12, 0x2, 0x19, 0xa, 0x1, 0x31, 0x15, 0x12, 0x1, 0x19, 0xa, 0x2, 
                                                  0x31, 0x15, 0x12, 0x0, 0x19, 0xa, 0x5, 0x31, 0x14, 0x19, 0x5, 0x0])
        scriptingBlock2.replaceScript(205, [0x19, 0x1, 0xed, 0x15, 0x1f, 0x3f, 0x19, 0x1, 0xee, 0x0, 0x0])
        scriptingBlock2.replaceScript(206, [0x19, 0x1, 0xed, 0x15, 0x1f, 0x4f, 0x19, 0x1, 0xee, 0x0, 0x0])
        scriptingBlock2.replaceScript(207, [0x0])
        mapHeaders.header[129].npcs[1] = [0x19, 0x6f, 0x5, 0x8a, 0x8f, 0xa1]
        mapHeaders.header[129].npcs[2] = [0x19, 0x1, 0x5, 0x8a, 0xc2, 0xa1]
        mapHeaders.header[129].npcs[4] = [0x19, 0x6f, 0xd, 0x8a, 0x8f, 0xb1]
        mapHeaders.header[129].npcs[5] = [0x19, 0x2, 0xd, 0x8a, 0xc3, 0xb1]
        mapHeaders.header[129].npcs[7] = [0x19, 0x6f, 0x15, 0xa, 0x8f, 0xc1]
        mapHeaders.header[129].npcs[8] = [0x19, 0x3, 0x15, 0xa, 0xc4, 0xc1]
        mapHeaders.header[129].npcs[10] = [0x19, 0x6f, 0x1d, 0xa, 0x8f, 0xd1]
        mapHeaders.header[129].npcs[11] = [0x19, 0x5, 0x1d, 0xa, 0xc5, 0xd1]
        mapHeaders.header[130].npcs[0] = [0x12, 0x0, 0x8c, 0x41, 0x3b, 0x90]
        mapHeaders.header[130].npcs[1] = [0x12, 0x0, 0xc, 0xc2, 0x3b, 0x90]
        mapHeaders.header[130].npcs[2] = [0x12, 0x0, 0x4c, 0xc3, 0x3b, 0x90]
        mapHeaders.header[131].npcs[3] = [0x11, 0x11, 0xba, 0x23, 0xc9, 0xa1]
        mapHeaders.header[132].npcs[0] = [0x5f, 0x2f, 0xaf, 0x47, 0x0, 0x90]
        mapHeaders.header[132].npcs[1] = [0x5f, 0x2f, 0x2e, 0xc7, 0xcd, 0xa1]
        mapHeaders.header[132].npcs[2] = [0x11, 0x11, 0x2d, 0x5, 0xca, 0xb1]
        mapHeaders.header[133].npcs[0] = [0x5f, 0x3f, 0x47, 0x57, 0x0, 0x90]
        mapHeaders.header[133].npcs[1] = [0x5f, 0x3f, 0x7, 0xd6, 0xce, 0xa1]
        mapHeaders.header[133].npcs[2] = [0x11, 0x11, 0xc5, 0x15, 0xcb, 0xb1]
        mapHeaders.header[134].npcs[0] = [0x5f, 0x4f, 0xd6, 0x56, 0x0, 0x90]
        mapHeaders.header[134].npcs[1] = [0x5f, 0x4f, 0x17, 0xd5, 0xed, 0xa1]
        mapHeaders.header[134].npcs[2] = [0x11, 0x11, 0x99, 0x14, 0xcc, 0xb1]

